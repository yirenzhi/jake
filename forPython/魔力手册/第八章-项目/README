项目：互联网融资日报

IT桔子(http://itjuzi.com/company)

1.问题拆解
(1)数据的获取
将数据从网站上抓取下来，保存成本地文件。
(2)数据分析
对数据进行不同维度的分析
(3)可视化显示
采用绘图工具，展示数据

2.所需库介绍
(1)抓取库Scrapy
包括以下组件：
引擎：用来处理整个系统的数据流处理，出发事务。
调度器：用来接受殷勤发过来的请求，压入队列中，并在引擎再次请求的时候返回。
下载器：用来下载网页内容，并将网页内容返回给蜘蛛。
蜘蛛：蜘蛛是主要干活的，用它来制订特定域名或网页的解析规则。

。。。


(2)数据处理库Pandas


(3)绘图库Matplotlib

3.实现原理
(1)数据抓取
用Scrapy抓取数据，主要是Item的定义，以及蜘蛛(Spider)的编写。
Item是用来承载要抓取的数据，Spider主要完成住区规则的定义，以及解析返回结果

(2)统计数据分布

(3)可视化

4.动手练习
(1)住区模块
(a)item定义，编写item.py

(b)编写spider
    继承CrawlSpider,它实现了从爬去的网页中获取链接，然后爬取的功能，用它来处理分页抓取

    name为蜘蛛名字，host要抓取的域名，allowed_domains是允许的域名，如果网站中有外部域名讲不会跟进，
start_urls是抓取地址，然后不停的翻页抓取

    rules是抓取规则，它指定了我们要自动跟进什么样的链接，LinkExtractor是连接提取器，
它自动从当前页面按照规则提取链接，供继续抓取。这里我们需要抓取公司详细信息，因此需要自定指定url的正则表达式
'/company/\d+'以及下一页的正则表达式'/company\?page=\d+',通过follow指定是否跟进。

    callback函数用于指定毁掉函数，即取得服务器返回结果后，做何种操作，这里需要对公司的信息进行解析，
因此定义parse_company函数

    parse_company函数里主要用Scrapy提供的选择器Selector通过Xpath语法，进行字段的提取，并赋值给item
(c)
(d)
(e)
(2)分布统计

(3)生成可视图



reload()函数
http://blog.csdn.net/five3/article/details/7762870
扩展：
作用：
对已经加载的模块进行重新加载，一般用于原模块有变化等特殊情况，reload前该模块必须已经import过。
e.g：
import os
reload(os)
说明：
reload会重新加载已加载的模块，但原来已经使用的实例还是会使用旧的模块，而新生产的实例会使用新的模块；reload后还是用原来的内存地址；
不能支持from。。import。。格式的模块进行重新加载。
上面说了，在特殊情况的下才会使用reload函数；除了原来模块文件有修改外，还有哪些情况需要使用reload函数呢，这里举个例子。
[python] view plaincopy

    #!/usr/bin/env python
    #encoding: utf-8
    import sys   #引用sys模块进来，并不是进行sys的第一次加载
    reload(sys)  #重新加载sys
    sys.setdefaultencoding('utf8')  ##调用setdefaultencoding函数

上面的代码是正确的，再测试下面的代码
[python] view plaincopy

    #!/usr/bin/env python
    #encoding: utf-8
    import sys
    sys.setdefaultencoding('utf8')

上面的测试会失败，那么为什么要在调用setdefaultencoding时必须要先reload一次sys模块呢？因为这里的import语句其实并不是sys的第一次导入语句，
也就是说这里其实可能是第二、三次进行sys模块的import，这里只是一个对sys的引用，只能reload才能进行重新加载；那么为什么要重新加载，
而直接引用过来则不能调用该函数呢？因为setdefaultencoding函数在被系统调用后被删除了，所以通过import引用进来时其实已经没有了，
所以必须reload一次sys模块，这样setdefaultencoding才会为可用，才能在代码里修改解释器当前的字符编码。试试下面的代码，同样会报错：

[python] view plaincopy

    #!/usr/bin/env python
    #encoding: utf-8
    import sys
    reload(sys)
    sys.setdefaultencoding('utf8')
    del sys.setdefaultencoding   ##删除原来的setdefaultencoding函数
    sys.setdefaultencoding('gb2312')

那么到底是谁在之前就导入sys并且调用了setdefaultencoding函数呢？答案就在python安装目录的Lib文件夹下，有一个叫site.py的文件【python2.6】，
在里面可以找到main() --> setencoding()-->sys.setdefaultencoding(encoding),因为这个site.py每次启动python解释器时会自动加载，
所以main函数每次都会被执行，setdefaultencoding函数一出来就已经被删除了。